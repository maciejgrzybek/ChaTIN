<head>
    <title>Dokumentacja koncowa ChaTIN: Bazy danych</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <link rel="Stylesheet" type="text/css" href="md.css">
</head>
<body>
ChaTIN
======
Opis bazy danych
----------------
**Prowadzący projekt**

* Andrzej Ciemski

**Autorzy**

* Andrzej Fiedukowicz
* Maciej Grzybek

Etap 0 - opis słowny projektu
=============================
W ramach projektu z przedmiotu Technologie Internetowe tworzona jest aplikacja pozwalająca przeprowadzać rozmowy p2p z wykorzystaniem protokołu IPv6, ze wsparciem konferencji.
Zastosowanie bazy danych sqlite obejmuje:

1. Zapisywanie, przechowywanie i wczytywanie historii wiadomości z poszczególnymi użytkownikami
2. Zapisywanie i przechowywanie a także przetwarzanie i zmienianie aktualnego stanu subskrypcji między użytkownikami (protokół subskrypcji jest oparty na maszynie stanowej, której stan przechowywany jest w bazie danych).
3. Zapisywanie powiązania adresów IP z czytelnymi dla użytkownika aliasami (nick). Szybkie odnajdywanie zadanego adresu IP na podstawie aliasu i odwrotnie - aliasu na podstawie adresu IP (przydatne przy implementacji frontendu).
4. Zapisywanie i odtwarzanie informacji związanych z listą uczestników i rozmową konferencyjną, gdzie z - zgodnie ze specyfikacją projektu - rozmowa jest identyfikowana po nazwie i adresie IP jej założyciela.


Etap 1 - projekt bazy danych
============================

Diagram ER (wraz z opisem związków)
-----------------------------------
<img src="./er.png">

Opis encji
----------

### alias ###
<table>
<tr><th>nazwa atrybutu</th><th>typ danych</th><th>ograniczenia                          </th><th>opis                                                   </th></tr>
<tr><td>ip            </td><td>TEXT      </td><td>PK, NN, <a href="./ipv6.html">IPv6</a></td><td>adres ip powiązany z danym aliasem                     </td></tr>
<tr><td>version       </td><td>INTEGER   </td><td>NN                                    </td><td>identyfikator wersji (optimistic locking)              </td></tr>
<tr><td>alias         </td><td>TEXT      </td><td>UNIQUE, NN                            </td><td>alias - zrozumiały i ustalony przez człowieka          </td></tr>
<tr><td>groupId       </td><td>INTEGER   </td><td>FK: group.id                          </td><td>id grupy do której należy alias                        </td></tr>
</table>

### message ###
Message jest typem nadrzędnym dla wiadomości prywatnej i wiadomości
konferencyjnej. Po analizie wymagań projektowych, zdecydowano się na
implementację podtypów w formie single table inheritance (generalizacja).
Następująca decyzja nie pociąga za sobą zbyt dużych kosztów pamięciowych, a
jednocześnie upraszcza implementację nieskomplikowanego (z natury)
rozgałęzienia wiadomości.

<table>
<tr><th>nazwa atrybutu</th><th>typ danych</th><th>ograniczenia                          </th><th>opis                                                   </th></tr>
<tr><td>id            </td><td>INTEGER   </td><td>PK, NN, AUTO INCREAMENT               </td><td>unikalny identyfikator wiadomości                      </td></tr>
<tr><td>version       </td><td>INTEGER   </td><td>NN                                    </td><td>identyfikator wersji (optimistic locking)              </td></tr>
<tr><td>content       </td><td>TEXT      </td><td>NN                                    </td><td>zawartość wiadomości (treść)                           </td></tr>
<tr><td>date          </td><td>INTEGER   </td><td>NN, TIMESTAMP                         </td><td>data otrzymania/wysłania wiadomości                    </td></tr>
<tr><td>ip            </td><td>TEXT      </td><td><a href="./ipv6.html">IPv6</a>        </td><td>adres ip nadawcy wiadomosci (jesli przych.)            </td></tr>
<tr><td>isOutgoing    </td><td>INTEGER   </td><td>NN, [01]                              </td><td>czy wiadomosc wychodzaca (1=tak). Brak bool w sqlite.  </td></tr>
<tr><td>conferenceId  </td><td>INTEGER   </td><td>FK: conference.id                     </td><td>identyfikator konferencji (jesli wiadomosc konf.)      </td></tr>
</table>

### subscription ###
<table>
<tr><th>nazwa atrybutu</th><th>typ danych</th><th>ograniczenia                          </th><th>opis                                                   </th></tr>
<tr><td>ip            </td><td>TEXT      </td><td>PK, NN, <a href="./ipv6.html">IPv6</a></td><td>adres ip powiązany z danym aliasem                     </td></tr>
<tr><td>version       </td><td>INTEGER   </td><td>NN                                    </td><td>identyfikator wersji (optimistic locking)              </td></tr>
<tr><td>state         </td><td>INTEGER   </td><td>NN, [01234]                           </td><td>obecny stan subskrypcji (patrz: types.hpp:SubPhase)    </td></tr>
<tr><td>lastChangeDate</td><td>INTEGER   </td><td>NN, TIMESTAMP                         </td><td>data ostatniej zmiany stanu                            </td></tr>
</table>

### group ###
<table>
<tr><th>nazwa atrybutu</th><th>typ danych</th><th>ograniczenia                          </th><th>opis                                                   </th></tr>
<tr><td>id            </td><td>INTEGER   </td><td>PK, NN, AUTO INCREAMENT               </td><td>unikalny identyfikator grupy                           </td></tr>
<tr><td>version       </td><td>INTEGER   </td><td>NN                                    </td><td>identyfikator wersji (optimistic locking)              </td></tr>
<tr><td>name          </td><td>TEXT      </td><td>NN                                    </td><td>nazwa grupy wybrana przez uzytkownika                  </td></tr>
</table>

### conference ###
`UNIQUE: (ownerIP, name)`
<table>
<tr><th>nazwa atrybutu</th><th>typ danych</th><th>ograniczenia                          </th><th>opis                                                                           </th></tr>
<tr><td>id            </td><td>INTEGER   </td><td>PK, NN, AUTO INCREAMENT               </td><td>unikalny identyfikator konferencji                                             </td></tr>
<tr><td>version       </td><td>INTEGER   </td><td>NN                                    </td><td>identyfikator wersji (optimistic locking)                                      </td></tr>
<tr><td>ownerIp       </td><td>TEXT      </td><td>NN, <a href="./ipv6.html">IPv6</a>    </td><td>adres IPv6 właściciela (założyciela) konferencji                               </td></tr>
<tr><td>name          </td><td>TEXT      </td><td>NN                                    </td><td>nazwa konferencji wybrana przez użytkownika                                    </td></tr>
<tr><td>createDate    </td><td>INTEGER   </td><td>NN, TIMESTAMP                         </td><td>data utworzenia (pierwsza odebrana wiadomość) konferencji u danego użytkownika </td></tr>
</table>

### conferenceMember ###
<table>
<tr><th>nazwa atrybutu</th><th>typ danych</th><th>ograniczenia                          </th><th>opis                                                                           </th></tr>
<tr><td>id            </td><td>INTEGER   </td><td>PK, NN, AUTO INCREAMENT               </td><td>unikalny identyfikator powiązania                                              </td></tr>
<tr><td>version       </td><td>INTEGER   </td><td>NN                                    </td><td>identyfikator wersji (optimistic locking)                                      </td></tr>
<tr><td>ip            </td><td>TEXT      </td><td><a href="./ipv6.html">IPv6</a>        </td><td>adres ip przypisywanego użytkownika                                            </td></tr>
<tr><td>conferenceId  </td><td>INTEGER   </td><td>FK: conference.id                     </td><td>identyfikator konferencji, do której przypisany jest użytkownik                </td></tr>
</table>

Analiza wymagań
---------------

### Wymagania funkcjonalne ###

#### 1. Archiwum wiadomości ####

1. Zapisywanie każdej wychodzącej i przychodzącej wiadomości w bazie danych
2. Wczytywanie historycznych wiadomości przy otwieraniu karty z rozmową

#### 2. Lista subskrypcji ####

1. Zapisywanie w bazie zmian stanu subskrypcji po wprowadzeniu powiązanych komend użytkownika (*sub, subakc, subdec*)
2. Zapisywanie w bazie zmian stanu subskrypcji wynikających z przychodzących pakietów (*iky, idky, ikya*)
3. Odtworzenie pełnej listy subskrypcji przy starcie aplikacji (wyświetlanie w widoku)
4. Bieżące aktualizowanie (odczytywanie) stanów subskrypcji w ramach wymagań konkretnego widoku

#### 3. Aliasy ####

1. Zapisywanie powiązania adresu IPv6 z dowolną wartością tekstową w ramach polecenia *addalias*
2. Odtworzenie pełnej listy aliasów (samych nazw) przy starcie aplikacji (wyświetlanie w widoku)
3. Odszukiwanie aliasu na podstawie danego adresu IP
4. Odszukiwanie adresu ip na podstawie danego aliasu
5. Zmiana własności aliasu (w szczególności nazwy) w ramach ograniczeń unikalności

#### 4. Konferencje ####

1. Zapisywanie nowo tworzonych konferencji w bazie danych 
2. Zapisywanie przychodzących konferencji w bazie danych 
3. Odtwarzanie listy uczestników konferencji na podstawie nazwy i adresu IPv6 właściciela
4. Sprawdzanie możliwości tworzenia nowej konferencji w ramach ograniczeń unikalności

### Wymagania niefunkcjonalne ###

* W ramach części bazodanowej należy przedewszystkim dotrzymać zawartych w dokumentacji wstępnej aplikacji limitów na ilość aliasów i osób w konferencji (1024 aliasy, 64 konferencje). 
  W przypadku sqlite takie ograniczenia są dość niską poprzeczką. 
  W ramach tych ograniczeń aplikacja powinna działać bezawaryjnie (tj. powinna spełniać wszystkie wymagania funkcjonalne a w próbie 1000 kolejnych testów obejmującyh kolejne wymagania funkcjonalne może zdarzyć się nie więcej niż 1 błąd), a okres reakcji między akcją użytkownika / przychodzącym pakietem a powiązaną z nią reakcją widoku nie powinien w żadnym razie przekroczyć 0.5s (nie uwzględnia się tu czasu wędrówki pakietów, które mogą spowolnić niektore akcje - zwłaszcza przy łączu niskiej jakości).
* W ramach tabel dotyczących aliasów należy zadbać o optymalność wyszukiwania
* zarówno po aliasie jak i po adresie IP. Wyszukiwanie to jest bowiem kluczowe
* dla spełnienia głównego ograniczenia czasowego. Przy spełnieniu założeń co
 do ilości aliasów, pojedyncza operacja CRUD na aliasach nie powinna
 przekroczyć czasu wykonania 0.5s, a odczyt pełnej bazy aliasów (przy starcie aplikacji) nie powinien trwać dłużej niż 1.5s.
* Aplikacja powinna uruchamiać się i być gotowa do pracy w czasie nie dłuższym niż 3sek (dla zachowania w/w limitów).
* Powyższe wymagania funkcjonalne i niefunkcjonalne spełnialne są dla środowisk uruchomieniowych wymienionych w specyfikacji tj. posiadających wsparcie dla wykorzystanych biliotek (patrz dokumentacja koncowa projektu).
* Aplikacja spełniać musi w/w ograniczenia czasowe mając do dyspozycji (tj. na własny użytek średnio) następujące zasoby min. **100MHz** (dla architektury x86_64), min. **32MB RAM**

Skrypt DDL
----------
<pre>
CREATE TABLE `group` ( `id` INTEGER NOT NULL, `name` TEXT NOT NULL, PRIMARY KEY(`id`), UNIQUE(`name`) );
CREATE TABLE `alias` ( `ip` TEXT NOT NULL, `alias` TEXT NOT NULL, `groupId` INTEGER NOT NULL, PRIMARY KEY(`ip`), UNIQUE(`alias`), FOREIGN KEY(`groupId`) REFERENCES `group`(id) );
CREATE TABLE `message` ( `id` INTEGER NOT NULL, `content` TEXT NOT NULL, `date` INTEGER NOT NULL, `ip` TEXT, `isOutgoing` INTEGER NOT NULL, `conferenceId` INTEGER,  PRIMARY KEY(`id`), FOREIGN KEY(`conferenceId`) REFERENCES `conference`(`id`) );
CREATE TABLE `subscription` ( `ip` TEXT NOT NULL, `state` INTEGER NOT NULL, `date` INTEGER NOT NULL, PRIMARY KEY(`ip`) );
CREATE TABLE `conference` ( `id` INTEGER NOT NULL, `ownerIp` TEXT NOT NULL, `name` TEXT NOT NULL, `date` INTEGER NOT NULL, PRIMARY KEY(`id`) );
CREATE TABLE `conferenceMember` ( `id` INTEGER NOT NULL, `ip` TEXT NOT NULL, `conferenceId` INTEGER NOT NULL, PRIMARY KEY(`id`), FOREIGN KEY(`conferenceId`) REFERENCES `conference`(`id`) );

CREATE TRIGGER alias_unique BEFORE INSERT ON alias
BEGIN
SELECT CASE
WHEN
(
    SELECT COUNT() as cnt FROM
        (SELECT alias from alias WHERE alias = new.alias)
        WHERE cnt > 0
)
THEN RAISE(FAIL,'Alias already exists')
END;
END;

CREATE INDEX alias_alias_idx ON alias(alias);
CREATE INDEX alias_ip_idx ON alias(ip);
CREATE INDEX alias_group_idx ON alias(groupId);
CREATE INDEX message_ip_idx ON message(ip);
CREATE INDEX message_conference_idx ON message(conferenceId);
CREATE INDEX subscription_idx ON subscription(ip);
CREATE INDEX group_idx ON `group`(id);
CREATE INDEX conference_idx ON conference(ownerIp,name);
CREATE INDEX conferenceMember_idx ON conferenceMember(conferenceId);
</pre>

Zobacz także jako <a href="../db/schema.sql">text/x-sql</a>

Etap 2 - projekt aplikacji
==========================

Hierarchia menu
---------------
Menu ma charakter jednopoziomowy.
Realizowane jest na dwa sposoby.

### Konsola interaktywna ### 
Konsola interaktywna jest głównym elementem GUI pozwalającym na wykonywanie wszystkich dopuszczalnych przez aplikację akcji.
Komunikacja z konsolą iteraktywną odbywa się przy użyciu komend tekstowych. Przy komunikacji z konsolą iteraktywną (w przypadku niektórych poleceń) ważny jest kontekst wykonania polecenia czyli stan aplikacji wyrażony przez aktualnie aktywną kartę. 
W szczególności polecenia niepoprzedzone znakiem "/" mają sens wyłącznie w kontekściebieżącej karty i oznaczają:

* Dla karty z rozmową 1 <-> 1 - wysłanie wiadomości do rozmówcy
* Dla karty z rozmową 1 <-> n - wysłanie wiadomości do konferencji (wszystkich jej uczestników)
* Dla karty logów - brak akcji

Polecenia poprzedzone znakiem "/" mogą mieć sens zarówno w konteście całości aplikacji jak i konkretnej karty, zgodnie z niżej nakreśloną semantyką:

* /open Alias/IP – otwiera kartę rozmowy z danym aliasem lub adresem IP, program automatycznie sprawdza czy karta już istnieje – w takim wypadku karta ta jest ustawiana jako aktywna. Ponadto wpisanie adresu IPv6 w przypadku gdy adres ten ma znany aplikacji alias, spowoduje otwarcie karty dla tego aliasu (by zapobiec problemowi dwóch kart dla jednego użytkownika).
* /confopen nazwa_konferencji Alias/IP{2+} - otwiera kartę rozmowy konferencyjnej. Wymaga podania minimum dwóch aliasów/adresów IP. Karta konferencyjna identyfikowana jest po podanej nazwie konferencji. W sieci mogą istnieć dwie konferencje o tej samiej nazwie ale innym właścicielu (użytkownik który wywoła /confopen staje się właścicielem konferencji).
* /addalias alias IP – powoduje dodanie aliasu o nazwie alias wskazującego na adres IP
* /close – zamyka bieżącą kartę, lub gdy zostanie wywołane na karcie logów – zamyka aplikację
* /sub alias/IP – wysyła prośbę o subskrypcję do użytkownika wskazanego przez alias/IP
* /subakc alias/IP – akceptuje prośbę wskazanego użytkownika 
* /subdec alias/IP – odrzuca prośbę wskazanego użytkownika

### Skróty w ramach GUI ###
W ramach GUI stworzono też kilka uproszczeń pozwalających na wykonanie pewnych często powtarzanych akcji przy użyciu myszki lub innego urządzenia wskazującego. W szczególności:

* Wybór karty może być realizowany przez kliknięcie na jedną z już otwartych kart
* Otworznie karty może być zrealizowane przez podwójne kliknięcie w jeden z dodanych do aplikacji aliasów (widocznych na liście).

Głowne moduły aplikacji
-----------------------

### DBDriver ###
Udostępnie obiektowy interfejs dla bazy danych mysql. Zarządza transakcjami. 
Odpowiada za przekazywanie zapytań do podległych modułów modelu ORM.
Stanowi bezpośredni łącznik miedzy modelem bazy danych a modelem aplikacji. 
Podlegają mu moduły odpowiedzialne za zarządzanie poszczególnymi tabelami bazy danych:

* DB/Alias
* DB/Conference
* DB/ConferenceMember
* DB/Group
* DB/Message
* DB/Subscription

### Socket ###
Biblioteka stanowiąca obiektową nakładkę (w zakresie wymaganym do realizacji aplikacji ChaTIN) na bibliotekę BSD Socktes.
Wykorzystuje ona mechanizmy języka C++ by zapewnić możliwie prosty interfejs do komunikacji sieciowej pozwalający na wysyłanie i odbieranie wiadomości w formie obieków klasy std::string.

### DialogManager ###
Element modelu aplikacji stanowiący swoiste przejście (proxy) między elementami kontrolera a bilioteką Socket.
DialogManager zarządza otwartymi połączeniami sieciowymi oraz kontroluje ich stan. 
Jego podstawową zaletą jest możliwość przyjmowania i odbierania wiadomości tekstowych w postaci zmiennej std::string do wskazanego adresu bez konieczności przejmowania się wywołującego o otwieranie/zamykanie/utrzymywanie połączeń. 
DialogManager realizuje funkcje serwera chatu dla połczeń przychodzących oraz klienta dla połączeń wychodzących.

### FromViewParser ###
Odbiera wiadmości od użytkownika (z widoku), parsuje ich znaczenie po czym wykonuje powiązane z nimi zadania odwołując się, w razie potrzeby zarówno do elementów modelu jak i uaktualniając widok.

### ToViewParser ###
Odbiera wiadomości od DialogManagera w postaci obiektów typu std::string. Parsuje je zgodnie z przyjętym standardem (wiadomości XML) opisanym niżej. 
Po czym wykonuje powiązane z danymi typami wiadomości XML akcje odwołując się zarówno do modelu jak i do widoku.

### AliasManager ###
Zarząda zarówno listą aliasów pozwalając na ich rejestrację oraz translacją alias=>IP oraz IP=>alias, jak i listą subskrypcji oraz powiązanym z nim automatem stanowym opisującym stan każdej z nich. 
Posiada metody pozwalające obsługiwać subskrypcję zarówno na podstawie sygnałów pochodzących od użytkownika jak i bezpośrednio z sieci.

### ConferenceManager ###
Zarządza znanymi dla danego hosta konferencjami istniejącymi w sieci. 
Zapisuje w bazie powiązania nazwy i właściciela z uczestnikami konferencji. 
Wykorzystywany jest również w przypadku wysyłania wiadomości do konfrencji w celu ustalenia listy adresów, które powinny otrzymać daną wiadmość.

### ChatWindow ###
Moduł widoku, odpowiada za renderowania okna.
Otrzymuje od kontrolera komunikaty dotyczące aktualizacji stanu widoku, wyświetla przychodzące wiadomości, obsługuje interakcję z użytkownikiem itp.

### XMLPackageCreator ###
Tworzy pakiety XML na podstawie zadanych informacji zgodnie z ustalonym standardem.

**Więcej informacji na temat modułów aplikacji, sposobu ich implementacji i komunikacji można znaleźć w załączonej dokumentacji końcowje całości projektu.**

Podział klient-serwer
---------------------
W przypadku zastosowania bazy sqlite stronę serwera przyjmuje część kodu wykonywalnego.
W ramach aplikacji rolę serwera przyjmuje moduł DBDriver wraz z podległymi mu modułami.
Rolę klienta natomiast przyjmują te moduły aplikacji, które komunikują się bezpośrednio z DBDriverem. 
W szczególności są to moduły  związane z modelem i w pewnym stopniu z kontrolerem, ale nigdy z widokiem.

### Rola serwera ###
- Zapewnienie dostępu do operacji CRUD dla bazy danych
- Zapewnienie podstawowych warunków spójności (autoinkrementacja, not null itp)
- Zapewnienie transakcyjnego dostępu do bazy danych i zadbanie o spójność wykonywanych na bazie operacji.

### Rola klienta ###
- Zapewnienie komunikacji z użytkownikiem
- Przetwarzanie akcji użytkownika na konkretne zapytania do serwera
- Wykonywanie operacji CRUD w ramach zdarzeń użytkownika i zdarzeń sieciowych
- Zapewnienie komunikacji sieciowej
- Zapewnienie sprawdzenia złożonych warunków spójności (np. format IPv6)

Wymuszenie integralności
------------------------

* Ograniczenia NOT NULL - zrealizowane w definicji tabel ze względu na dobre wsparcie i wygodny sposób przekazywania błędów (wyjątki) przez ORM. Jest to jedno z najbardziej podstawowych ograniczeń.
* Ograniczenia FOREIGN KEY - zrealizowane w definicji tabel ze względu na prostą realizację i wygodną obsługę błędów.
* Ograniczenia UNIQUE / PRIMARY KEY - zrealizowane w definicji tabel ponieważ zawierają one proste wsparcie i ich zdefiniowanie jest niezbędne do usprawdzenia procesów wyszukiwania.
* Ograniczenie IPv6 - zrealizowane programowo, ze względu na wsparcie biblioteki BSDSocket dla tego rodzaju sprawdzeń (brak konieczności definiowania złożonych wyrażeń regularnych, względna odporność na ewentualne zmiany standardu).
* Ograniczenia TIMESTAMP - ponieważ sqlite nie posiada typu odpowiedzialnego
* za przechowywanie daty, dane są przechowywane jako liczby całkowitoliczbowe. Wszelkie dane wstawiane w te pola są kontrolowane programowo i są wynikiem wykonania funkcji time, która ze swojej natury zwraca poprawną dla takiego pola wartość.
* Ograniczenia AUTO INCREMENT - realizowane w definicji bazy danych, ze względu na prostotę używania i brak konieczności zajmowania się tymi wartościami na poziomie aplikacji.

Indeksy w bazie danych
----------------------

### alias ###
* Alias - częsta operacja wyszukiwania ip wg. aliasu
* IP - częsta operacja wyszukiwania aliasu wg. ip
* groupId - mogą okazać się potrzebne operacje wybierania listy aliasów dla danej grupy a także obliczenia zbiorcze z nimi związane.

### message ###
* IP - konieczność wyszukiwania danych do załadowania dla danej karty (dla jednego autora)
* ConferenceId - konieczność wyszukiwania danych do załadowania dla danej karty konferencyjnej (dla danej konferencji)

### subscription ###
* IP - wyszukiwanie/aktualizowanie stanu subskrypcji odbywa się praktycznie
* wyłącznie na podstawie adresów IP

### group ###
* id - grupy wybierane są najczęściej w kontekście iteracji lub w kontekście wyboru użytkownika (złączenie groupId<->id)

### conference ###
* (ownerIp, name) - jest to para identyfikująca grupę wg. której dokonywane będzie wyszukiwanie id by dokonać złączenia z listą użytkowników dla danej konferencji

### conferenceMember ###
* conferenceId - wyszukiwanie ma semantyczny sens tylko dla użytkowników należących do wskazanej przez id konferencji tj. przy złączeniu (conferenceId<->conference.id)

Transakcje dla historii wiadomości
----------------------------------
* Pobieranie historii wiadomości dla danego kontaktu odbywa się wewnątrz
transakcji, w celu zapewniania integralności danych. Dzięki temu każdy
powołany do życia obiekt ORMowy (tworzony w pętli) pochodzi z tego samego
stanu historii wiadomości danej rozmowy.
Takie zachowanie gwarantuje, że pobieranie historii rozmów jest bezpieczne,
niezależnie od tego czy klient jest połączony, czy nie.

Makieta GUI
-----------
<img src="./ChaTIN2.png">

### Legenda ###
* 1 - lista aliasów wraz ze stanem subskrypcji
* 2 - głowne okno rozmowy (indywidualne dla każdej karty)
* 3 - pasek zakładek - z wyróżnieniem aktywnej karty
* 4 - linia wejścia - główna metoda komunikacji z użytkownikiem
* 5 - przycisk zatwierdzenia, równoważny z naciśnięciem klawisza ENTER

Etap 3 - implemetnacja
======================

### Sztuczne klucze ###
* W początkowej fazie implementacji okazało się, że pierwotny projekt bazy
 danych należy zmodyfikować, tak by wygodnie implementowało się jego obsługę
 za pośrednictwem wybranego narzędzia ORM (Wt::Dbo). Ze względu na trudność
 implementacji złożonych kluczy głównych, zdecydowano się zrezygnować z
 naturalnego klucza dla conferenceMember, którym jest trójka
 (ip,conference_ownerip, conference_name). Wprowadzono sztuczny klucz główny,
 w postaci pola całkowitoliczbowego automatycznie zwiększanego
 (autoincrement).

### Współbieżność ###
* Zdecydowano się wykorzystać wsparcie ORM dla zabezpieczenia równoległego
 dostępu do danych w bazie. Zastosowano strategię optimistic locking,
 realizowaną przy wykorzystaniu pola version w każdej tabeli.

### Transakcje ###
* Operacje objęte transakcją:
** Pobieranie aliasów do bimapy (alias<->ip) oraz mapy subskrypcji AliasManagera
** Pobieranie historii wiadomości
* Moduł bazy danych (DBDriver) udostępnia metody zarządzania transakcjami, co
pozwala w prosty sposób rozpocząć, a następnie podjąć decyzję o formie
zakończenia transakcji (commit/rollback) na poziomie modułów spoza namespace'u
DB. DBDriver zarządza transakcjami, przechowując ich obiekty ORMowe w
wektorze aktywnych transakcji.

</body>
